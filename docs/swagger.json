{
    "swagger": "2.0",
    "info": {
        "description": "The RESTful API Document for MilvusV2.",
        "title": "Milvus RESTful API",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "v2.1"
    },
    "host": "milvus-proxy:8080",
    "basePath": "/api/v1",
    "paths": {
        "/alias": {
            "post": {
                "description": "Create an alias for a collection name",
                "tags": [
                    "Alias"
                ],
                "summary": "CreateAlias",
                "parameters": [
                    {
                        "description": "CreateAliasRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateAliasRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an Alias",
                "tags": [
                    "Alias"
                ],
                "summary": "DropAlias",
                "parameters": [
                    {
                        "description": "DropAliasRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DropAliasRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "patch": {
                "description": "Alter an alias",
                "tags": [
                    "Alias"
                ],
                "summary": "AlterAlias",
                "parameters": [
                    {
                        "description": "AlterAliasRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.AlterAliasRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/collection": {
            "get": {
                "description": "Describe a collection",
                "tags": [
                    "Collection"
                ],
                "summary": "DescribeCollection",
                "parameters": [
                    {
                        "description": "DescribeCollectionRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DescribeCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.DescribeCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a collection",
                "tags": [
                    "Collection"
                ],
                "summary": "CreateCollection",
                "parameters": [
                    {
                        "description": "CreateCollectionRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "delete": {
                "description": "Drop a collection",
                "tags": [
                    "Collection"
                ],
                "summary": "DropCollection",
                "parameters": [
                    {
                        "description": "DropCollectionRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DropCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/collection/existence": {
            "get": {
                "description": "Get if a collection's existence",
                "tags": [
                    "Collection"
                ],
                "summary": "HasCollection",
                "parameters": [
                    {
                        "description": "HasCollectionRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.HasCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.BoolResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/collection/load": {
            "post": {
                "description": "Load a collection for search",
                "tags": [
                    "Collection"
                ],
                "summary": "LoadCollection",
                "parameters": [
                    {
                        "description": "LoadCollectionRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.HasCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "delete": {
                "description": "Release a collection loaded before",
                "tags": [
                    "Collection"
                ],
                "summary": "ReleaseCollection",
                "parameters": [
                    {
                        "description": "ReleaseCollectionRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.HasCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/collection/statistics": {
            "get": {
                "description": "Get a collection's statistics",
                "tags": [
                    "Collection"
                ],
                "summary": "GetCollectionStatistics",
                "parameters": [
                    {
                        "description": "GetCollectionStatisticsRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetCollectionStatisticsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.GetCollectionStatisticsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/collections": {
            "get": {
                "description": "Show all collections",
                "tags": [
                    "Collection"
                ],
                "summary": "ShowCollections",
                "parameters": [
                    {
                        "description": "ShowCollectionsRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ShowCollectionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.ShowCollectionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/compaction": {
            "post": {
                "description": "Do a mannual compaction",
                "tags": [
                    "Ops"
                ],
                "summary": "ManualCompaction",
                "parameters": [
                    {
                        "description": "ManualCompactionRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ManualCompactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.ManualCompactionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/compaction/plans": {
            "get": {
                "description": "Get the plans of a compaction",
                "tags": [
                    "Ops"
                ],
                "summary": "GetCompactionPlans",
                "parameters": [
                    {
                        "description": "GetCompactionPlansRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetCompactionPlansRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.GetCompactionPlansResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/compaction/state": {
            "get": {
                "description": "Get the state of a import task",
                "tags": [
                    "Import"
                ],
                "summary": "GetImportState",
                "parameters": [
                    {
                        "description": "GetImportStateRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetImportStateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.GetImportStateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/compaction/tasks": {
            "get": {
                "description": "List all import tasks",
                "tags": [
                    "Import"
                ],
                "summary": "ListImportTasks",
                "parameters": [
                    {
                        "description": "ListImportTasksRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ListImportTasksRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.ListImportTasksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/credential": {
            "post": {
                "description": "Create a new user and password",
                "tags": [
                    "Credential"
                ],
                "summary": "CreateCredential",
                "parameters": [
                    {
                        "description": "CreateCredentialRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateCredentialRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Credential",
                "tags": [
                    "Credential"
                ],
                "summary": "DeleteCredential",
                "parameters": [
                    {
                        "description": "DeleteCredentialRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DeleteCredentialRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update password for a user",
                "tags": [
                    "Credential"
                ],
                "summary": "UpdateCredential",
                "parameters": [
                    {
                        "description": "UpdateCredential",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.UpdateCredentialRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/credential/users": {
            "get": {
                "description": "List all users",
                "tags": [
                    "Credential"
                ],
                "summary": "ListCredUsers",
                "parameters": [
                    {
                        "description": "ListCredUsersRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ListCredUsersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.ListCredUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/distance": {
            "post": {
                "description": "Calculate distance between specified vectors",
                "tags": [
                    "Entity"
                ],
                "summary": "CalcDistance",
                "parameters": [
                    {
                        "description": "CalcDistanceRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CalcDistanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.CalcDistanceResults"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/entities": {
            "post": {
                "description": "Insert rows of data entities into a collection",
                "tags": [
                    "Entity"
                ],
                "summary": "Insert",
                "parameters": [
                    {
                        "description": "InsertRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.InsertRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete rows of data entities from a collection by given expresssion",
                "tags": [
                    "Entity"
                ],
                "summary": "Delete",
                "parameters": [
                    {
                        "description": "DeleteRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/import": {
            "post": {
                "description": "Import data files(json, numpy, etc.) on MinIO/S3 storage, read and parse them into sealed segments",
                "tags": [
                    "Import"
                ],
                "summary": "Import",
                "parameters": [
                    {
                        "description": "ImportRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ImportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.ImportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/index": {
            "get": {
                "description": "Describe an index",
                "tags": [
                    "Index"
                ],
                "summary": "DescribeIndex",
                "parameters": [
                    {
                        "description": "DescribeIndexRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DescribeIndexRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.DescribeIndexResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "post": {
                "description": "Create an Index",
                "tags": [
                    "Index"
                ],
                "summary": "CreateIndex",
                "parameters": [
                    {
                        "description": "CreateIndexRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateIndexRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "delete": {
                "description": "Drop an index",
                "tags": [
                    "Index"
                ],
                "summary": "DropIndex",
                "parameters": [
                    {
                        "description": "DropIndexRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DropIndexRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/index/progress": {
            "get": {
                "description": "Get the build progress of an index",
                "tags": [
                    "Index"
                ],
                "summary": "GetIndexBuildProgress",
                "parameters": [
                    {
                        "description": "GetIndexBuildProgressRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetIndexBuildProgressRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.GetIndexBuildProgressResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/index/state": {
            "get": {
                "description": "Get the state of an index",
                "tags": [
                    "Index"
                ],
                "summary": "GetIndexState",
                "parameters": [
                    {
                        "description": "GetIndexStateRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetIndexStateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.GetIndexStateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/load-balance": {
            "post": {
                "description": "Do a load balancing operation between query nodes",
                "tags": [
                    "Ops"
                ],
                "summary": "LoadBalance",
                "parameters": [
                    {
                        "description": "LoadBalanceRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.LoadBalanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Get metrics",
                "tags": [
                    "Metrics"
                ],
                "summary": "GetMetrics",
                "parameters": [
                    {
                        "description": "GetMetricsRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetMetricsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.GetMetricsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/partition": {
            "post": {
                "description": "Create a partition",
                "tags": [
                    "Partition"
                ],
                "summary": "CreatePartition",
                "parameters": [
                    {
                        "description": "CreatePartitionRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreatePartitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a partition",
                "tags": [
                    "Partition"
                ],
                "summary": "DropPartition",
                "parameters": [
                    {
                        "description": "DropPartitionRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DropPartitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/partition/existence": {
            "get": {
                "description": "Get if a partition exists",
                "tags": [
                    "Partition"
                ],
                "summary": "HasPartition",
                "parameters": [
                    {
                        "description": "HasPartitionRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.HasPartitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.BoolResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/partition/statistics": {
            "get": {
                "description": "Get a partition's statistics",
                "tags": [
                    "Partition"
                ],
                "summary": "GetPartitionStatistics",
                "parameters": [
                    {
                        "description": "GetPartitionStatisticsRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetPartitionStatisticsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.GetPartitionStatisticsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/partitions": {
            "get": {
                "description": "Show all partitions",
                "tags": [
                    "Partition"
                ],
                "summary": "ShowPartitions",
                "parameters": [
                    {
                        "description": "ShowPartitionsRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ShowPartitionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.ShowPartitionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/partitions/load": {
            "post": {
                "description": "Load a group of paritions for search",
                "tags": [
                    "Partition"
                ],
                "summary": "LoadPartitions",
                "parameters": [
                    {
                        "description": "LoadPartitionsRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.LoadPartitionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            },
            "delete": {
                "description": "Release a group of loaded paritions",
                "tags": [
                    "Partition"
                ],
                "summary": "ReleasePartitions",
                "parameters": [
                    {
                        "description": "ReleasePartitionsRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ReleasePartitionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/persist": {
            "post": {
                "description": "Flush a collection's data to disk. Milvus's data will be auto flushed. Flush is only required when you want to get up to date entities numbers in statistics due to some internal mechanism. It will be removed in the future.",
                "tags": [
                    "Entity"
                ],
                "summary": "Flush",
                "parameters": [
                    {
                        "description": "FlushRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.FlushRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.FlushResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/persist/segment-info": {
            "get": {
                "description": "Returns sealed segments's information of a collection",
                "tags": [
                    "Entity"
                ],
                "summary": "GetPersistentSegmentInfo",
                "parameters": [
                    {
                        "description": "GetPersistentSegmentInfoRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetPersistentSegmentInfoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.GetPersistentSegmentInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/persist/state": {
            "get": {
                "description": "Get the flush state of multiple segments",
                "tags": [
                    "Entity"
                ],
                "summary": "GetFlushState",
                "parameters": [
                    {
                        "description": "GetFlushStateRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetFlushStateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.GetFlushStateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/query": {
            "post": {
                "description": "do a explicit record query by given expression. For example when you want to query by primary key.",
                "tags": [
                    "Entity"
                ],
                "summary": "Query",
                "parameters": [
                    {
                        "description": "QueryRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.QueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.QueryResults"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/query-segment-info": {
            "get": {
                "description": "Returns growing segments's information of a collection",
                "tags": [
                    "Entity"
                ],
                "summary": "GetQuerySegmentInfo",
                "parameters": [
                    {
                        "description": "GetQuerySegmentInfoRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetQuerySegmentInfoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.GetQuerySegmentInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/replicas": {
            "get": {
                "description": "GetReplicas info of a collection",
                "tags": [
                    "Ops"
                ],
                "summary": "GetReplicas",
                "parameters": [
                    {
                        "description": "GetReplicasRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetReplicasRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.GetReplicasResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        },
        "/search": {
            "post": {
                "description": "Do a k nearest neighbors search with bool expression",
                "tags": [
                    "Entity"
                ],
                "summary": "Search",
                "parameters": [
                    {
                        "description": "SearchRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.SearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted",
                        "schema": {
                            "$ref": "#/definitions/server.SearchResults"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/common.Status"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.KeyDataPair": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "common.KeyValuePair": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "common.MsgBase": {
            "type": "object",
            "properties": {
                "msg_type": {
                    "description": "Not useful for now",
                    "type": "integer"
                }
            }
        },
        "common.Status": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "main.CreateCollectionRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The unique collection name in milvus.(Required)",
                    "type": "string"
                },
                "consistency_level": {
                    "description": "The consistency level that the collection used, modification is not supported now.",
                    "type": "integer"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "schema": {
                    "description": "The serialized `schema.CollectionSchema`(Required)",
                    "$ref": "#/definitions/schema.CollectionSchema"
                },
                "shards_num": {
                    "description": "Once set, no modification is allowed (Optional)\nhttps://github.com/milvus-io/milvus/issues/6690",
                    "type": "integer"
                }
            }
        },
        "schema.CollectionSchema": {
            "type": "object",
            "properties": {
                "autoID": {
                    "description": "deprecated later, keep compatible with c++ part now",
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.FieldSchema"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "schema.FieldData": {
            "type": "object",
            "properties": {
                "field": {
                    "description": "Types that are assignable to Field:\n\t*FieldData_Scalars\n\t*FieldData_Vectors"
                },
                "field_id": {
                    "type": "integer"
                },
                "field_name": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "schema.FieldSchema": {
            "type": "object",
            "properties": {
                "autoID": {
                    "type": "boolean"
                },
                "data_type": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "fieldID": {
                    "type": "integer"
                },
                "index_params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValuePair"
                    }
                },
                "is_primary_key": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type_params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValuePair"
                    }
                }
            }
        },
        "schema.IDs": {
            "type": "object",
            "properties": {
                "idField": {
                    "description": "Types that are assignable to IdField:\n\t*IDs_IntId\n\t*IDs_StrId"
                }
            }
        },
        "schema.LongArray": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "schema.SearchResultData": {
            "type": "object",
            "properties": {
                "fields_data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.FieldData"
                    }
                },
                "ids": {
                    "$ref": "#/definitions/schema.IDs"
                },
                "num_queries": {
                    "type": "integer"
                },
                "scores": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "top_k": {
                    "type": "integer"
                },
                "topks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "server.AlterAliasRequest": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string"
                },
                "base": {
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "type": "string"
                },
                "db_name": {
                    "type": "string"
                }
            }
        },
        "server.BoolResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/common.Status"
                },
                "value": {
                    "type": "boolean"
                }
            }
        },
        "server.CalcDistanceRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "$ref": "#/definitions/common.MsgBase"
                },
                "op_left": {
                    "description": "vectors on the left of operator",
                    "$ref": "#/definitions/server.VectorsArray"
                },
                "op_right": {
                    "description": "vectors on the right of operator",
                    "$ref": "#/definitions/server.VectorsArray"
                },
                "params": {
                    "description": "\"metric\":\"L2\"/\"IP\"/\"HAMMIN\"/\"TANIMOTO\"",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValuePair"
                    }
                }
            }
        },
        "server.CalcDistanceResults": {
            "type": "object",
            "properties": {
                "array": {
                    "description": "num(op_left)*num(op_right) distance values, \"HAMMIN\" return integer distance\n\nTypes that are assignable to Array:\n\t*CalcDistanceResults_IntDist\n\t*CalcDistanceResults_FloatDist"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.CompactionMergeInfo": {
            "type": "object",
            "properties": {
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "target": {
                    "type": "integer"
                }
            }
        },
        "server.CreateAliasRequest": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string"
                },
                "base": {
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "type": "string"
                },
                "db_name": {
                    "type": "string"
                }
            }
        },
        "server.CreateCredentialRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "created_utc_timestamps": {
                    "description": "create time",
                    "type": "integer"
                },
                "modified_utc_timestamps": {
                    "description": "modify time",
                    "type": "integer"
                },
                "password": {
                    "description": "ciphertext password",
                    "type": "string"
                },
                "username": {
                    "description": "username",
                    "type": "string"
                }
            }
        },
        "server.CreateIndexRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The particular collection name you want to create index.",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "extra_params": {
                    "description": "Support keys: index_type,metric_type, params. Different index_type may has different params.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValuePair"
                    }
                },
                "field_name": {
                    "description": "The vector field name in this particular collection",
                    "type": "string"
                },
                "index_name": {
                    "description": "Version before 2.0.2 doesn't contain index_name, we use default index name.",
                    "type": "string"
                }
            }
        },
        "server.CreatePartitionRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The collection name in milvus",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "partition_name": {
                    "description": "The partition name you want to create.",
                    "type": "string"
                }
            }
        },
        "server.DeleteCredentialRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "username": {
                    "description": "Not useful for now",
                    "type": "string"
                }
            }
        },
        "server.DeleteRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "type": "string"
                },
                "db_name": {
                    "type": "string"
                },
                "expr": {
                    "type": "string"
                },
                "hash_keys": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "partition_name": {
                    "type": "string"
                }
            }
        },
        "server.DescribeCollectionRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collectionID": {
                    "description": "The collection ID you want to describe",
                    "type": "integer"
                },
                "collection_name": {
                    "description": "The collection name you want to describe, you can pass collection_name or collectionID",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "time_stamp": {
                    "description": "If time_stamp is not zero, will describe collection success when time_stamp \u003e= created collection timestamp, otherwise will throw error.",
                    "type": "integer"
                }
            }
        },
        "server.DescribeCollectionResponse": {
            "type": "object",
            "properties": {
                "aliases": {
                    "description": "The aliases of this collection",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "collectionID": {
                    "description": "The collection id",
                    "type": "integer"
                },
                "collection_name": {
                    "description": "The collection name",
                    "type": "string"
                },
                "consistency_level": {
                    "description": "The consistency level that the collection used, modification is not supported now.",
                    "type": "integer"
                },
                "created_timestamp": {
                    "description": "Hybrid timestamp in milvus",
                    "type": "integer"
                },
                "created_utc_timestamp": {
                    "description": "The utc timestamp calculated by created_timestamp",
                    "type": "integer"
                },
                "physical_channel_names": {
                    "description": "System design related, users should not perceive",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "schema": {
                    "description": "The schema param when you created collection.",
                    "$ref": "#/definitions/schema.CollectionSchema"
                },
                "shards_num": {
                    "description": "The shards number you set.",
                    "type": "integer"
                },
                "start_positions": {
                    "description": "The message ID/posititon when collection is created",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyDataPair"
                    }
                },
                "status": {
                    "description": "Contain error_code and reason",
                    "$ref": "#/definitions/common.Status"
                },
                "virtual_channel_names": {
                    "description": "System design related, users should not perceive",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "server.DescribeIndexRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The particular collection name in Milvus",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "field_name": {
                    "description": "The vector field name in this particular collection",
                    "type": "string"
                },
                "index_name": {
                    "description": "No need to set up for now @2021.06.30",
                    "type": "string"
                }
            }
        },
        "server.DescribeIndexResponse": {
            "type": "object",
            "properties": {
                "index_descriptions": {
                    "description": "All index informations, for now only return tha latest index you created for the collection.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.IndexDescription"
                    }
                },
                "status": {
                    "description": "Response status",
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.DropAliasRequest": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string"
                },
                "base": {
                    "$ref": "#/definitions/common.MsgBase"
                },
                "db_name": {
                    "type": "string"
                }
            }
        },
        "server.DropCollectionRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The unique collection name in milvus.(Required)",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                }
            }
        },
        "server.DropIndexRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "must",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "must",
                    "type": "string"
                },
                "db_name": {
                    "type": "string"
                },
                "field_name": {
                    "type": "string"
                },
                "index_name": {
                    "description": "No need to set up for now @2021.06.30",
                    "type": "string"
                }
            }
        },
        "server.DropPartitionRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The collection name in milvus",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "partition_name": {
                    "description": "The partition name you want to drop",
                    "type": "string"
                }
            }
        },
        "server.FlushRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "db_name": {
                    "type": "string"
                }
            }
        },
        "server.FlushResponse": {
            "type": "object",
            "properties": {
                "coll_segIDs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/schema.LongArray"
                    }
                },
                "db_name": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.GetCollectionStatisticsRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The collection name you want get statistics",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                }
            }
        },
        "server.GetCollectionStatisticsResponse": {
            "type": "object",
            "properties": {
                "stats": {
                    "description": "Collection statistics data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValuePair"
                    }
                },
                "status": {
                    "description": "Contain error_code and reason",
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.GetCompactionPlansRequest": {
            "type": "object",
            "properties": {
                "compactionID": {
                    "type": "integer"
                }
            }
        },
        "server.GetCompactionPlansResponse": {
            "type": "object",
            "properties": {
                "mergeInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.CompactionMergeInfo"
                    }
                },
                "state": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.GetCompactionStateRequest": {
            "type": "object",
            "properties": {
                "compactionID": {
                    "type": "integer"
                }
            }
        },
        "server.GetCompactionStateResponse": {
            "type": "object",
            "properties": {
                "completedPlanNo": {
                    "type": "integer"
                },
                "executingPlanNo": {
                    "type": "integer"
                },
                "state": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                },
                "timeoutPlanNo": {
                    "type": "integer"
                }
            }
        },
        "server.GetFlushStateRequest": {
            "type": "object",
            "properties": {
                "segmentIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "server.GetFlushStateResponse": {
            "type": "object",
            "properties": {
                "flushed": {
                    "type": "boolean"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.GetImportStateRequest": {
            "type": "object",
            "properties": {
                "task": {
                    "description": "id of an import task",
                    "type": "integer"
                }
            }
        },
        "server.GetImportStateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "id of an import task",
                    "type": "integer"
                },
                "id_list": {
                    "description": "auto generated ids if the primary key is autoid",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "infos": {
                    "description": "more informations about the task, progress percent, file path, failed reason, etc.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValuePair"
                    }
                },
                "row_count": {
                    "description": "if the task is finished, this value is how many rows are imported. if the task is not finished, this value is how many rows are parsed. return 0 if failed.",
                    "type": "integer"
                },
                "state": {
                    "description": "is this import task finished or not",
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.GetIndexBuildProgressRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The collection name in milvus",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "field_name": {
                    "description": "The vector field name in this collection",
                    "type": "string"
                },
                "index_name": {
                    "description": "Not useful for now",
                    "type": "string"
                }
            }
        },
        "server.GetIndexBuildProgressResponse": {
            "type": "object",
            "properties": {
                "indexed_rows": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                },
                "total_rows": {
                    "type": "integer"
                }
            }
        },
        "server.GetIndexStateRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "must",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "must",
                    "type": "string"
                },
                "db_name": {
                    "type": "string"
                },
                "field_name": {
                    "type": "string"
                },
                "index_name": {
                    "description": "No need to set up for now @2021.06.30",
                    "type": "string"
                }
            }
        },
        "server.GetIndexStateResponse": {
            "type": "object",
            "properties": {
                "fail_reason": {
                    "type": "string"
                },
                "state": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.GetMetricsRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "$ref": "#/definitions/common.MsgBase"
                },
                "request": {
                    "description": "request is of jsonic format",
                    "type": "string"
                }
            }
        },
        "server.GetMetricsResponse": {
            "type": "object",
            "properties": {
                "component_name": {
                    "description": "metrics from which component",
                    "type": "string"
                },
                "response": {
                    "description": "response is of jsonic format",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.GetPartitionStatisticsRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The collection name in milvus",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "partition_name": {
                    "description": "The partition name you want to collect statistics",
                    "type": "string"
                }
            }
        },
        "server.GetPartitionStatisticsResponse": {
            "type": "object",
            "properties": {
                "stats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValuePair"
                    }
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.GetPersistentSegmentInfoRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "must",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collectionName": {
                    "description": "must",
                    "type": "string"
                },
                "dbName": {
                    "type": "string"
                }
            }
        },
        "server.GetPersistentSegmentInfoResponse": {
            "type": "object",
            "properties": {
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.PersistentSegmentInfo"
                    }
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.GetQuerySegmentInfoRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "must",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collectionName": {
                    "description": "must",
                    "type": "string"
                },
                "dbName": {
                    "type": "string"
                }
            }
        },
        "server.GetQuerySegmentInfoResponse": {
            "type": "object",
            "properties": {
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.QuerySegmentInfo"
                    }
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.GetReplicasRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collectionID": {
                    "type": "integer"
                },
                "with_shard_nodes": {
                    "type": "boolean"
                }
            }
        },
        "server.GetReplicasResponse": {
            "type": "object",
            "properties": {
                "replicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.ReplicaInfo"
                    }
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.HasCollectionRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The collection name you want to check.",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "time_stamp": {
                    "description": "If time_stamp is not zero, will return true when time_stamp \u003e= created collection timestamp, otherwise will return false.",
                    "type": "integer"
                }
            }
        },
        "server.HasPartitionRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The collection name in milvus",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "partition_name": {
                    "description": "The partition name you want to check",
                    "type": "string"
                }
            }
        },
        "server.ImportRequest": {
            "type": "object",
            "properties": {
                "channel_names": {
                    "description": "channel names for the collection",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "collection_name": {
                    "description": "target collection",
                    "type": "string"
                },
                "files": {
                    "description": "file paths to be imported",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "options": {
                    "description": "import options, bucket, etc.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValuePair"
                    }
                },
                "partition_name": {
                    "description": "target partition",
                    "type": "string"
                },
                "row_based": {
                    "description": "the file is row-based or column-based",
                    "type": "boolean"
                }
            }
        },
        "server.ImportResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/common.Status"
                },
                "tasks": {
                    "description": "id array of import tasks",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "server.IndexDescription": {
            "type": "object",
            "properties": {
                "field_name": {
                    "description": "The vector field name",
                    "type": "string"
                },
                "indexID": {
                    "description": "Index id",
                    "type": "integer"
                },
                "index_name": {
                    "description": "Index name",
                    "type": "string"
                },
                "params": {
                    "description": "Will return index_type, metric_type, params(like nlist).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValuePair"
                    }
                }
            }
        },
        "server.InsertRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "type": "string"
                },
                "db_name": {
                    "type": "string"
                },
                "fields_data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.FieldData"
                    }
                },
                "hash_keys": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "num_rows": {
                    "type": "integer"
                },
                "partition_name": {
                    "type": "string"
                }
            }
        },
        "server.ListCredUsersRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                }
            }
        },
        "server.ListCredUsersResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Contain error_code and reason",
                    "$ref": "#/definitions/common.Status"
                },
                "usernames": {
                    "description": "username array",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "server.ListImportTasksRequest": {
            "type": "object"
        },
        "server.ListImportTasksResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/common.Status"
                },
                "tasks": {
                    "description": "list of all import tasks",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.GetImportStateResponse"
                    }
                }
            }
        },
        "server.LoadBalanceRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collectionName": {
                    "type": "string"
                },
                "dst_nodeIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sealed_segmentIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "src_nodeID": {
                    "type": "integer"
                }
            }
        },
        "server.LoadPartitionsRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The collection name in milvus",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "partition_names": {
                    "description": "The partition names you want to load",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "replica_number": {
                    "description": "The replicas number you would load, 1 by default",
                    "type": "integer"
                }
            }
        },
        "server.ManualCompactionRequest": {
            "type": "object",
            "properties": {
                "collectionID": {
                    "type": "integer"
                },
                "timetravel": {
                    "type": "integer"
                }
            }
        },
        "server.ManualCompactionResponse": {
            "type": "object",
            "properties": {
                "compactionID": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.PersistentSegmentInfo": {
            "type": "object",
            "properties": {
                "collectionID": {
                    "type": "integer"
                },
                "num_rows": {
                    "type": "integer"
                },
                "partitionID": {
                    "type": "integer"
                },
                "segmentID": {
                    "type": "integer"
                },
                "state": {
                    "type": "integer"
                }
            }
        },
        "server.QueryRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "type": "string"
                },
                "db_name": {
                    "type": "string"
                },
                "expr": {
                    "type": "string"
                },
                "guarantee_timestamp": {
                    "description": "guarantee_timestamp",
                    "type": "integer"
                },
                "output_fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "partition_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "travel_timestamp": {
                    "type": "integer"
                }
            }
        },
        "server.QueryResults": {
            "type": "object",
            "properties": {
                "collection_name": {
                    "type": "string"
                },
                "fields_data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.FieldData"
                    }
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.QuerySegmentInfo": {
            "type": "object",
            "properties": {
                "collectionID": {
                    "type": "integer"
                },
                "indexID": {
                    "type": "integer"
                },
                "index_name": {
                    "type": "string"
                },
                "mem_size": {
                    "type": "integer"
                },
                "nodeID": {
                    "type": "integer"
                },
                "num_rows": {
                    "type": "integer"
                },
                "partitionID": {
                    "type": "integer"
                },
                "segmentID": {
                    "type": "integer"
                },
                "state": {
                    "type": "integer"
                }
            }
        },
        "server.ReleasePartitionsRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "The collection name in milvus",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "partition_names": {
                    "description": "The partition names you want to release",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "server.ReplicaInfo": {
            "type": "object",
            "properties": {
                "collectionID": {
                    "type": "integer"
                },
                "node_ids": {
                    "description": "include leaders",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "partition_ids": {
                    "description": "empty indicates to load collection",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "replicaID": {
                    "type": "integer"
                },
                "shard_replicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.ShardReplica"
                    }
                }
            }
        },
        "server.SearchRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "must",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_name": {
                    "description": "must",
                    "type": "string"
                },
                "db_name": {
                    "type": "string"
                },
                "dsl": {
                    "description": "must",
                    "type": "string"
                },
                "dsl_type": {
                    "description": "must",
                    "type": "integer"
                },
                "guarantee_timestamp": {
                    "description": "guarantee_timestamp",
                    "type": "integer"
                },
                "output_fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "partition_names": {
                    "description": "must",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "placeholder_group": {
                    "description": "serialized `PlaceholderGroup`",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "search_params": {
                    "description": "must",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValuePair"
                    }
                },
                "travel_timestamp": {
                    "type": "integer"
                }
            }
        },
        "server.SearchResults": {
            "type": "object",
            "properties": {
                "collection_name": {
                    "type": "string"
                },
                "results": {
                    "$ref": "#/definitions/schema.SearchResultData"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.ShardReplica": {
            "type": "object",
            "properties": {
                "dm_channel_name": {
                    "type": "string"
                },
                "leaderID": {
                    "type": "integer"
                },
                "leader_addr": {
                    "description": "IP:port",
                    "type": "string"
                },
                "node_ids": {
                    "description": "optional, DO NOT save it in meta, set it only for GetReplicas()\nif with_shard_nodes is true",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "server.ShowCollectionsRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collection_names": {
                    "description": "When type is InMemory, will return these collection's inMemory_percentages.(Optional)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "time_stamp": {
                    "description": "Not useful for now",
                    "type": "integer"
                },
                "type": {
                    "description": "Decide return Loaded collections or All collections(Optional)",
                    "type": "integer"
                }
            }
        },
        "server.ShowCollectionsResponse": {
            "type": "object",
            "properties": {
                "collection_ids": {
                    "description": "Collection Id array",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "collection_names": {
                    "description": "Collection name array",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_timestamps": {
                    "description": "Hybrid timestamps in milvus",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "created_utc_timestamps": {
                    "description": "The utc timestamp calculated by created_timestamp",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "inMemory_percentages": {
                    "description": "Load percentage on querynode when type is InMemory",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status": {
                    "description": "Contain error_code and reason",
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.ShowPartitionsRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "collectionID": {
                    "description": "The collection id in milvus",
                    "type": "integer"
                },
                "collection_name": {
                    "description": "The collection name you want to describe, you can pass collection_name or collectionID",
                    "type": "string"
                },
                "db_name": {
                    "description": "Not useful for now",
                    "type": "string"
                },
                "partition_names": {
                    "description": "When type is InMemory, will return these patitions's inMemory_percentages.(Optional)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Decide return Loaded partitions or All partitions(Optional)",
                    "type": "integer"
                }
            }
        },
        "server.ShowPartitionsResponse": {
            "type": "object",
            "properties": {
                "created_timestamps": {
                    "description": "All hybrid timestamps",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "created_utc_timestamps": {
                    "description": "All utc timestamps calculated by created_timestamps",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "inMemory_percentages": {
                    "description": "Load percentage on querynode",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "partitionIDs": {
                    "description": "All partition ids for this collection",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "partition_names": {
                    "description": "All partition names for this collection",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "description": "Contain error_code and reason",
                    "$ref": "#/definitions/common.Status"
                }
            }
        },
        "server.UpdateCredentialRequest": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Not useful for now",
                    "$ref": "#/definitions/common.MsgBase"
                },
                "created_utc_timestamps": {
                    "description": "create time",
                    "type": "integer"
                },
                "modified_utc_timestamps": {
                    "description": "modify time",
                    "type": "integer"
                },
                "newPassword": {
                    "description": "new password",
                    "type": "string"
                },
                "oldPassword": {
                    "description": "old password",
                    "type": "string"
                },
                "username": {
                    "description": "username",
                    "type": "string"
                }
            }
        },
        "server.VectorsArray": {
            "type": "object",
            "properties": {
                "array": {
                    "description": "Types that are assignable to Array:\n\t*VectorsArray_IdArray\n\t*VectorsArray_DataArray"
                }
            }
        }
    }
}