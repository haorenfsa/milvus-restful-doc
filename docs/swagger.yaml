basePath: /api/v1
definitions:
  common.KeyDataPair:
    properties:
      data:
        items:
          type: integer
        type: array
      key:
        type: string
    type: object
  common.KeyValuePair:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  common.MsgBase:
    properties:
      msg_type:
        description: Not useful for now
        type: integer
    type: object
  common.Status:
    properties:
      error_code:
        type: integer
      reason:
        type: string
    type: object
  main.CreateCollectionRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The unique collection name in milvus.(Required)
        type: string
      consistency_level:
        description: The consistency level that the collection used, modification
          is not supported now.
        type: integer
      db_name:
        description: Not useful for now
        type: string
      schema:
        $ref: '#/definitions/schema.CollectionSchema'
        description: The serialized `schema.CollectionSchema`(Required)
      shards_num:
        description: |-
          Once set, no modification is allowed (Optional)
          https://github.com/milvus-io/milvus/issues/6690
        type: integer
    type: object
  schema.CollectionSchema:
    properties:
      autoID:
        description: deprecated later, keep compatible with c++ part now
        type: boolean
      description:
        type: string
      fields:
        items:
          $ref: '#/definitions/schema.FieldSchema'
        type: array
      name:
        type: string
    type: object
  schema.FieldData:
    properties:
      field:
        description: "Types that are assignable to Field:\n\t*FieldData_Scalars\n\t*FieldData_Vectors"
      field_id:
        type: integer
      field_name:
        type: string
      type:
        type: integer
    type: object
  schema.FieldSchema:
    properties:
      autoID:
        type: boolean
      data_type:
        type: integer
      description:
        type: string
      fieldID:
        type: integer
      index_params:
        items:
          $ref: '#/definitions/common.KeyValuePair'
        type: array
      is_primary_key:
        type: boolean
      name:
        type: string
      type_params:
        items:
          $ref: '#/definitions/common.KeyValuePair'
        type: array
    type: object
  schema.IDs:
    properties:
      idField:
        description: "Types that are assignable to IdField:\n\t*IDs_IntId\n\t*IDs_StrId"
    type: object
  schema.LongArray:
    properties:
      data:
        items:
          type: integer
        type: array
    type: object
  schema.SearchResultData:
    properties:
      fields_data:
        items:
          $ref: '#/definitions/schema.FieldData'
        type: array
      ids:
        $ref: '#/definitions/schema.IDs'
      num_queries:
        type: integer
      scores:
        items:
          type: number
        type: array
      top_k:
        type: integer
      topks:
        items:
          type: integer
        type: array
    type: object
  server.AlterAliasRequest:
    properties:
      alias:
        type: string
      base:
        $ref: '#/definitions/common.MsgBase'
      collection_name:
        type: string
      db_name:
        type: string
    type: object
  server.BoolResponse:
    properties:
      status:
        $ref: '#/definitions/common.Status'
      value:
        type: boolean
    type: object
  server.CalcDistanceRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
      op_left:
        $ref: '#/definitions/server.VectorsArray'
        description: vectors on the left of operator
      op_right:
        $ref: '#/definitions/server.VectorsArray'
        description: vectors on the right of operator
      params:
        description: '"metric":"L2"/"IP"/"HAMMIN"/"TANIMOTO"'
        items:
          $ref: '#/definitions/common.KeyValuePair'
        type: array
    type: object
  server.CalcDistanceResults:
    properties:
      array:
        description: "num(op_left)*num(op_right) distance values, \"HAMMIN\" return
          integer distance\n\nTypes that are assignable to Array:\n\t*CalcDistanceResults_IntDist\n\t*CalcDistanceResults_FloatDist"
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.CompactionMergeInfo:
    properties:
      sources:
        items:
          type: integer
        type: array
      target:
        type: integer
    type: object
  server.CreateAliasRequest:
    properties:
      alias:
        type: string
      base:
        $ref: '#/definitions/common.MsgBase'
      collection_name:
        type: string
      db_name:
        type: string
    type: object
  server.CreateCredentialRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      created_utc_timestamps:
        description: create time
        type: integer
      modified_utc_timestamps:
        description: modify time
        type: integer
      password:
        description: ciphertext password
        type: string
      username:
        description: username
        type: string
    type: object
  server.CreateIndexRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The particular collection name you want to create index.
        type: string
      db_name:
        description: Not useful for now
        type: string
      extra_params:
        description: 'Support keys: index_type,metric_type, params. Different index_type
          may has different params.'
        items:
          $ref: '#/definitions/common.KeyValuePair'
        type: array
      field_name:
        description: The vector field name in this particular collection
        type: string
      index_name:
        description: Version before 2.0.2 doesn't contain index_name, we use default
          index name.
        type: string
    type: object
  server.CreatePartitionRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The collection name in milvus
        type: string
      db_name:
        description: Not useful for now
        type: string
      partition_name:
        description: The partition name you want to create.
        type: string
    type: object
  server.DeleteCredentialRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      username:
        description: Not useful for now
        type: string
    type: object
  server.DeleteRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
      collection_name:
        type: string
      db_name:
        type: string
      expr:
        type: string
      hash_keys:
        items:
          type: integer
        type: array
      partition_name:
        type: string
    type: object
  server.DescribeCollectionRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The collection name you want to describe, you can pass collection_name
          or collectionID
        type: string
      collectionID:
        description: The collection ID you want to describe
        type: integer
      db_name:
        description: Not useful for now
        type: string
      time_stamp:
        description: If time_stamp is not zero, will describe collection success when
          time_stamp >= created collection timestamp, otherwise will throw error.
        type: integer
    type: object
  server.DescribeCollectionResponse:
    properties:
      aliases:
        description: The aliases of this collection
        items:
          type: string
        type: array
      collection_name:
        description: The collection name
        type: string
      collectionID:
        description: The collection id
        type: integer
      consistency_level:
        description: The consistency level that the collection used, modification
          is not supported now.
        type: integer
      created_timestamp:
        description: Hybrid timestamp in milvus
        type: integer
      created_utc_timestamp:
        description: The utc timestamp calculated by created_timestamp
        type: integer
      physical_channel_names:
        description: System design related, users should not perceive
        items:
          type: string
        type: array
      schema:
        $ref: '#/definitions/schema.CollectionSchema'
        description: The schema param when you created collection.
      shards_num:
        description: The shards number you set.
        type: integer
      start_positions:
        description: The message ID/posititon when collection is created
        items:
          $ref: '#/definitions/common.KeyDataPair'
        type: array
      status:
        $ref: '#/definitions/common.Status'
        description: Contain error_code and reason
      virtual_channel_names:
        description: System design related, users should not perceive
        items:
          type: string
        type: array
    type: object
  server.DescribeIndexRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The particular collection name in Milvus
        type: string
      db_name:
        description: Not useful for now
        type: string
      field_name:
        description: The vector field name in this particular collection
        type: string
      index_name:
        description: No need to set up for now @2021.06.30
        type: string
    type: object
  server.DescribeIndexResponse:
    properties:
      index_descriptions:
        description: All index informations, for now only return tha latest index
          you created for the collection.
        items:
          $ref: '#/definitions/server.IndexDescription'
        type: array
      status:
        $ref: '#/definitions/common.Status'
        description: Response status
    type: object
  server.DropAliasRequest:
    properties:
      alias:
        type: string
      base:
        $ref: '#/definitions/common.MsgBase'
      db_name:
        type: string
    type: object
  server.DropCollectionRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The unique collection name in milvus.(Required)
        type: string
      db_name:
        description: Not useful for now
        type: string
    type: object
  server.DropIndexRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: must
      collection_name:
        description: must
        type: string
      db_name:
        type: string
      field_name:
        type: string
      index_name:
        description: No need to set up for now @2021.06.30
        type: string
    type: object
  server.DropPartitionRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The collection name in milvus
        type: string
      db_name:
        description: Not useful for now
        type: string
      partition_name:
        description: The partition name you want to drop
        type: string
    type: object
  server.FlushRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
      collection_names:
        items:
          type: string
        type: array
      db_name:
        type: string
    type: object
  server.FlushResponse:
    properties:
      coll_segIDs:
        additionalProperties:
          $ref: '#/definitions/schema.LongArray'
        type: object
      db_name:
        type: string
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.GetCollectionStatisticsRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The collection name you want get statistics
        type: string
      db_name:
        description: Not useful for now
        type: string
    type: object
  server.GetCollectionStatisticsResponse:
    properties:
      stats:
        description: Collection statistics data
        items:
          $ref: '#/definitions/common.KeyValuePair'
        type: array
      status:
        $ref: '#/definitions/common.Status'
        description: Contain error_code and reason
    type: object
  server.GetCompactionPlansRequest:
    properties:
      compactionID:
        type: integer
    type: object
  server.GetCompactionPlansResponse:
    properties:
      mergeInfos:
        items:
          $ref: '#/definitions/server.CompactionMergeInfo'
        type: array
      state:
        type: integer
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.GetCompactionStateRequest:
    properties:
      compactionID:
        type: integer
    type: object
  server.GetCompactionStateResponse:
    properties:
      completedPlanNo:
        type: integer
      executingPlanNo:
        type: integer
      state:
        type: integer
      status:
        $ref: '#/definitions/common.Status'
      timeoutPlanNo:
        type: integer
    type: object
  server.GetFlushStateRequest:
    properties:
      segmentIDs:
        items:
          type: integer
        type: array
    type: object
  server.GetFlushStateResponse:
    properties:
      flushed:
        type: boolean
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.GetImportStateRequest:
    properties:
      task:
        description: id of an import task
        type: integer
    type: object
  server.GetImportStateResponse:
    properties:
      id:
        description: id of an import task
        type: integer
      id_list:
        description: auto generated ids if the primary key is autoid
        items:
          type: integer
        type: array
      infos:
        description: more informations about the task, progress percent, file path,
          failed reason, etc.
        items:
          $ref: '#/definitions/common.KeyValuePair'
        type: array
      row_count:
        description: if the task is finished, this value is how many rows are imported.
          if the task is not finished, this value is how many rows are parsed. return
          0 if failed.
        type: integer
      state:
        description: is this import task finished or not
        type: integer
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.GetIndexBuildProgressRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The collection name in milvus
        type: string
      db_name:
        description: Not useful for now
        type: string
      field_name:
        description: The vector field name in this collection
        type: string
      index_name:
        description: Not useful for now
        type: string
    type: object
  server.GetIndexBuildProgressResponse:
    properties:
      indexed_rows:
        type: integer
      status:
        $ref: '#/definitions/common.Status'
      total_rows:
        type: integer
    type: object
  server.GetIndexStateRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: must
      collection_name:
        description: must
        type: string
      db_name:
        type: string
      field_name:
        type: string
      index_name:
        description: No need to set up for now @2021.06.30
        type: string
    type: object
  server.GetIndexStateResponse:
    properties:
      fail_reason:
        type: string
      state:
        type: integer
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.GetMetricsRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
      request:
        description: request is of jsonic format
        type: string
    type: object
  server.GetMetricsResponse:
    properties:
      component_name:
        description: metrics from which component
        type: string
      response:
        description: response is of jsonic format
        type: string
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.GetPartitionStatisticsRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The collection name in milvus
        type: string
      db_name:
        description: Not useful for now
        type: string
      partition_name:
        description: The partition name you want to collect statistics
        type: string
    type: object
  server.GetPartitionStatisticsResponse:
    properties:
      stats:
        items:
          $ref: '#/definitions/common.KeyValuePair'
        type: array
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.GetPersistentSegmentInfoRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: must
      collectionName:
        description: must
        type: string
      dbName:
        type: string
    type: object
  server.GetPersistentSegmentInfoResponse:
    properties:
      infos:
        items:
          $ref: '#/definitions/server.PersistentSegmentInfo'
        type: array
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.GetQuerySegmentInfoRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: must
      collectionName:
        description: must
        type: string
      dbName:
        type: string
    type: object
  server.GetQuerySegmentInfoResponse:
    properties:
      infos:
        items:
          $ref: '#/definitions/server.QuerySegmentInfo'
        type: array
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.GetReplicasRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
      collectionID:
        type: integer
      with_shard_nodes:
        type: boolean
    type: object
  server.GetReplicasResponse:
    properties:
      replicas:
        items:
          $ref: '#/definitions/server.ReplicaInfo'
        type: array
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.HasCollectionRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The collection name you want to check.
        type: string
      db_name:
        description: Not useful for now
        type: string
      time_stamp:
        description: If time_stamp is not zero, will return true when time_stamp >=
          created collection timestamp, otherwise will return false.
        type: integer
    type: object
  server.HasPartitionRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The collection name in milvus
        type: string
      db_name:
        description: Not useful for now
        type: string
      partition_name:
        description: The partition name you want to check
        type: string
    type: object
  server.ImportRequest:
    properties:
      channel_names:
        description: channel names for the collection
        items:
          type: string
        type: array
      collection_name:
        description: target collection
        type: string
      files:
        description: file paths to be imported
        items:
          type: string
        type: array
      options:
        description: import options, bucket, etc.
        items:
          $ref: '#/definitions/common.KeyValuePair'
        type: array
      partition_name:
        description: target partition
        type: string
      row_based:
        description: the file is row-based or column-based
        type: boolean
    type: object
  server.ImportResponse:
    properties:
      status:
        $ref: '#/definitions/common.Status'
      tasks:
        description: id array of import tasks
        items:
          type: integer
        type: array
    type: object
  server.IndexDescription:
    properties:
      field_name:
        description: The vector field name
        type: string
      index_name:
        description: Index name
        type: string
      indexID:
        description: Index id
        type: integer
      params:
        description: Will return index_type, metric_type, params(like nlist).
        items:
          $ref: '#/definitions/common.KeyValuePair'
        type: array
    type: object
  server.InsertRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
      collection_name:
        type: string
      db_name:
        type: string
      fields_data:
        items:
          $ref: '#/definitions/schema.FieldData'
        type: array
      hash_keys:
        items:
          type: integer
        type: array
      num_rows:
        type: integer
      partition_name:
        type: string
    type: object
  server.ListCredUsersRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
    type: object
  server.ListCredUsersResponse:
    properties:
      status:
        $ref: '#/definitions/common.Status'
        description: Contain error_code and reason
      usernames:
        description: username array
        items:
          type: string
        type: array
    type: object
  server.ListImportTasksRequest:
    type: object
  server.ListImportTasksResponse:
    properties:
      status:
        $ref: '#/definitions/common.Status'
      tasks:
        description: list of all import tasks
        items:
          $ref: '#/definitions/server.GetImportStateResponse'
        type: array
    type: object
  server.LoadBalanceRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
      collectionName:
        type: string
      dst_nodeIDs:
        items:
          type: integer
        type: array
      sealed_segmentIDs:
        items:
          type: integer
        type: array
      src_nodeID:
        type: integer
    type: object
  server.LoadPartitionsRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The collection name in milvus
        type: string
      db_name:
        description: Not useful for now
        type: string
      partition_names:
        description: The partition names you want to load
        items:
          type: string
        type: array
      replica_number:
        description: The replicas number you would load, 1 by default
        type: integer
    type: object
  server.ManualCompactionRequest:
    properties:
      collectionID:
        type: integer
      timetravel:
        type: integer
    type: object
  server.ManualCompactionResponse:
    properties:
      compactionID:
        type: integer
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.PersistentSegmentInfo:
    properties:
      collectionID:
        type: integer
      num_rows:
        type: integer
      partitionID:
        type: integer
      segmentID:
        type: integer
      state:
        type: integer
    type: object
  server.QueryRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
      collection_name:
        type: string
      db_name:
        type: string
      expr:
        type: string
      guarantee_timestamp:
        description: guarantee_timestamp
        type: integer
      output_fields:
        items:
          type: string
        type: array
      partition_names:
        items:
          type: string
        type: array
      travel_timestamp:
        type: integer
    type: object
  server.QueryResults:
    properties:
      collection_name:
        type: string
      fields_data:
        items:
          $ref: '#/definitions/schema.FieldData'
        type: array
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.QuerySegmentInfo:
    properties:
      collectionID:
        type: integer
      index_name:
        type: string
      indexID:
        type: integer
      mem_size:
        type: integer
      nodeID:
        type: integer
      num_rows:
        type: integer
      partitionID:
        type: integer
      segmentID:
        type: integer
      state:
        type: integer
    type: object
  server.ReleasePartitionsRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The collection name in milvus
        type: string
      db_name:
        description: Not useful for now
        type: string
      partition_names:
        description: The partition names you want to release
        items:
          type: string
        type: array
    type: object
  server.ReplicaInfo:
    properties:
      collectionID:
        type: integer
      node_ids:
        description: include leaders
        items:
          type: integer
        type: array
      partition_ids:
        description: empty indicates to load collection
        items:
          type: integer
        type: array
      replicaID:
        type: integer
      shard_replicas:
        items:
          $ref: '#/definitions/server.ShardReplica'
        type: array
    type: object
  server.SearchRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: must
      collection_name:
        description: must
        type: string
      db_name:
        type: string
      dsl:
        description: must
        type: string
      dsl_type:
        description: must
        type: integer
      guarantee_timestamp:
        description: guarantee_timestamp
        type: integer
      output_fields:
        items:
          type: string
        type: array
      partition_names:
        description: must
        items:
          type: string
        type: array
      placeholder_group:
        description: serialized `PlaceholderGroup`
        items:
          type: integer
        type: array
      search_params:
        description: must
        items:
          $ref: '#/definitions/common.KeyValuePair'
        type: array
      travel_timestamp:
        type: integer
    type: object
  server.SearchResults:
    properties:
      collection_name:
        type: string
      results:
        $ref: '#/definitions/schema.SearchResultData'
      status:
        $ref: '#/definitions/common.Status'
    type: object
  server.ShardReplica:
    properties:
      dm_channel_name:
        type: string
      leader_addr:
        description: IP:port
        type: string
      leaderID:
        type: integer
      node_ids:
        description: |-
          optional, DO NOT save it in meta, set it only for GetReplicas()
          if with_shard_nodes is true
        items:
          type: integer
        type: array
    type: object
  server.ShowCollectionsRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_names:
        description: When type is InMemory, will return these collection's inMemory_percentages.(Optional)
        items:
          type: string
        type: array
      db_name:
        description: Not useful for now
        type: string
      time_stamp:
        description: Not useful for now
        type: integer
      type:
        description: Decide return Loaded collections or All collections(Optional)
        type: integer
    type: object
  server.ShowCollectionsResponse:
    properties:
      collection_ids:
        description: Collection Id array
        items:
          type: integer
        type: array
      collection_names:
        description: Collection name array
        items:
          type: string
        type: array
      created_timestamps:
        description: Hybrid timestamps in milvus
        items:
          type: integer
        type: array
      created_utc_timestamps:
        description: The utc timestamp calculated by created_timestamp
        items:
          type: integer
        type: array
      inMemory_percentages:
        description: Load percentage on querynode when type is InMemory
        items:
          type: integer
        type: array
      status:
        $ref: '#/definitions/common.Status'
        description: Contain error_code and reason
    type: object
  server.ShowPartitionsRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      collection_name:
        description: The collection name you want to describe, you can pass collection_name
          or collectionID
        type: string
      collectionID:
        description: The collection id in milvus
        type: integer
      db_name:
        description: Not useful for now
        type: string
      partition_names:
        description: When type is InMemory, will return these patitions's inMemory_percentages.(Optional)
        items:
          type: string
        type: array
      type:
        description: Decide return Loaded partitions or All partitions(Optional)
        type: integer
    type: object
  server.ShowPartitionsResponse:
    properties:
      created_timestamps:
        description: All hybrid timestamps
        items:
          type: integer
        type: array
      created_utc_timestamps:
        description: All utc timestamps calculated by created_timestamps
        items:
          type: integer
        type: array
      inMemory_percentages:
        description: Load percentage on querynode
        items:
          type: integer
        type: array
      partition_names:
        description: All partition names for this collection
        items:
          type: string
        type: array
      partitionIDs:
        description: All partition ids for this collection
        items:
          type: integer
        type: array
      status:
        $ref: '#/definitions/common.Status'
        description: Contain error_code and reason
    type: object
  server.UpdateCredentialRequest:
    properties:
      base:
        $ref: '#/definitions/common.MsgBase'
        description: Not useful for now
      created_utc_timestamps:
        description: create time
        type: integer
      modified_utc_timestamps:
        description: modify time
        type: integer
      newPassword:
        description: new password
        type: string
      oldPassword:
        description: old password
        type: string
      username:
        description: username
        type: string
    type: object
  server.VectorsArray:
    properties:
      array:
        description: "Types that are assignable to Array:\n\t*VectorsArray_IdArray\n\t*VectorsArray_DataArray"
    type: object
host: milvus-proxy:8080
info:
  contact: {}
  description: The RESTful API Document for MilvusV2.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Milvus RESTful API
  version: v2.1
paths:
  /alias:
    delete:
      description: Delete an Alias
      parameters:
      - description: DropAliasRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.DropAliasRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: DropAlias
      tags:
      - Alias
    patch:
      description: Alter an alias
      parameters:
      - description: AlterAliasRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.AlterAliasRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: AlterAlias
      tags:
      - Alias
    post:
      description: Create an alias for a collection name
      parameters:
      - description: CreateAliasRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.CreateAliasRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: CreateAlias
      tags:
      - Alias
  /collection:
    delete:
      description: Drop a collection
      parameters:
      - description: DropCollectionRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.DropCollectionRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: DropCollection
      tags:
      - Collection
    get:
      description: Describe a collection
      parameters:
      - description: DescribeCollectionRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.DescribeCollectionRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.DescribeCollectionResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: DescribeCollection
      tags:
      - Collection
    post:
      description: Create a collection
      parameters:
      - description: CreateCollectionRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/main.CreateCollectionRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: CreateCollection
      tags:
      - Collection
  /collection/existence:
    get:
      description: Get if a collection's existence
      parameters:
      - description: HasCollectionRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.HasCollectionRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.BoolResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: HasCollection
      tags:
      - Collection
  /collection/load:
    delete:
      description: Release a collection loaded before
      parameters:
      - description: ReleaseCollectionRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.HasCollectionRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: ReleaseCollection
      tags:
      - Collection
    post:
      description: Load a collection for search
      parameters:
      - description: LoadCollectionRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.HasCollectionRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: LoadCollection
      tags:
      - Collection
  /collection/statistics:
    get:
      description: Get a collection's statistics
      parameters:
      - description: GetCollectionStatisticsRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.GetCollectionStatisticsRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.GetCollectionStatisticsResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: GetCollectionStatistics
      tags:
      - Collection
  /collections:
    get:
      description: Show all collections
      parameters:
      - description: ShowCollectionsRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.ShowCollectionsRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.ShowCollectionsResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: ShowCollections
      tags:
      - Collection
  /compaction:
    post:
      description: Do a mannual compaction
      parameters:
      - description: ManualCompactionRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.ManualCompactionRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.ManualCompactionResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: ManualCompaction
      tags:
      - Ops
  /compaction/plans:
    get:
      description: Get the plans of a compaction
      parameters:
      - description: GetCompactionPlansRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.GetCompactionPlansRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.GetCompactionPlansResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: GetCompactionPlans
      tags:
      - Ops
  /compaction/state:
    get:
      description: Get the state of a import task
      parameters:
      - description: GetImportStateRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.GetImportStateRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.GetImportStateResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: GetImportState
      tags:
      - Import
  /compaction/tasks:
    get:
      description: List all import tasks
      parameters:
      - description: ListImportTasksRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.ListImportTasksRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.ListImportTasksResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: ListImportTasks
      tags:
      - Import
  /credential:
    delete:
      description: Delete a Credential
      parameters:
      - description: DeleteCredentialRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.DeleteCredentialRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: DeleteCredential
      tags:
      - Credential
    patch:
      description: Update password for a user
      parameters:
      - description: UpdateCredential
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.UpdateCredentialRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: UpdateCredential
      tags:
      - Credential
    post:
      description: Create a new user and password
      parameters:
      - description: CreateCredentialRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.CreateCredentialRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: CreateCredential
      tags:
      - Credential
  /credential/users:
    get:
      description: List all users
      parameters:
      - description: ListCredUsersRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.ListCredUsersRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.ListCredUsersResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: ListCredUsers
      tags:
      - Credential
  /distance:
    post:
      description: Calculate distance between specified vectors
      parameters:
      - description: CalcDistanceRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.CalcDistanceRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.CalcDistanceResults'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: CalcDistance
      tags:
      - Entity
  /entities:
    delete:
      description: Delete rows of data entities from a collection by given expresssion
      parameters:
      - description: DeleteRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.DeleteRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: Delete
      tags:
      - Entity
    post:
      description: Insert rows of data entities into a collection
      parameters:
      - description: InsertRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.InsertRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: Insert
      tags:
      - Entity
  /import:
    post:
      description: Import data files(json, numpy, etc.) on MinIO/S3 storage, read
        and parse them into sealed segments
      parameters:
      - description: ImportRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.ImportRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.ImportResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: Import
      tags:
      - Import
  /index:
    delete:
      description: Drop an index
      parameters:
      - description: DropIndexRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.DropIndexRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: DropIndex
      tags:
      - Index
    get:
      description: Describe an index
      parameters:
      - description: DescribeIndexRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.DescribeIndexRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.DescribeIndexResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: DescribeIndex
      tags:
      - Index
    post:
      description: Create an Index
      parameters:
      - description: CreateIndexRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.CreateIndexRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: CreateIndex
      tags:
      - Index
  /index/progress:
    get:
      description: Get the build progress of an index
      parameters:
      - description: GetIndexBuildProgressRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.GetIndexBuildProgressRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.GetIndexBuildProgressResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: GetIndexBuildProgress
      tags:
      - Index
  /index/state:
    get:
      description: Get the state of an index
      parameters:
      - description: GetIndexStateRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.GetIndexStateRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.GetIndexStateResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: GetIndexState
      tags:
      - Index
  /load-balance:
    post:
      description: Do a load balancing operation between query nodes
      parameters:
      - description: LoadBalanceRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.LoadBalanceRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: LoadBalance
      tags:
      - Ops
  /metrics:
    get:
      description: Get metrics
      parameters:
      - description: GetMetricsRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.GetMetricsRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.GetMetricsResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: GetMetrics
      tags:
      - Metrics
  /partition:
    delete:
      description: Delete a partition
      parameters:
      - description: DropPartitionRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.DropPartitionRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: DropPartition
      tags:
      - Partition
    post:
      description: Create a partition
      parameters:
      - description: CreatePartitionRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.CreatePartitionRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: CreatePartition
      tags:
      - Partition
  /partition/existence:
    get:
      description: Get if a partition exists
      parameters:
      - description: HasPartitionRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.HasPartitionRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.BoolResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: HasPartition
      tags:
      - Partition
  /partition/statistics:
    get:
      description: Get a partition's statistics
      parameters:
      - description: GetPartitionStatisticsRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.GetPartitionStatisticsRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.GetPartitionStatisticsResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: GetPartitionStatistics
      tags:
      - Partition
  /partitions:
    get:
      description: Show all partitions
      parameters:
      - description: ShowPartitionsRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.ShowPartitionsRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.ShowPartitionsResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: ShowPartitions
      tags:
      - Partition
  /partitions/load:
    delete:
      description: Release a group of loaded paritions
      parameters:
      - description: ReleasePartitionsRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.ReleasePartitionsRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: ReleasePartitions
      tags:
      - Partition
    post:
      description: Load a group of paritions for search
      parameters:
      - description: LoadPartitionsRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.LoadPartitionsRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/common.Status'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: LoadPartitions
      tags:
      - Partition
  /persist:
    post:
      description: Flush a collection's data to disk. Milvus's data will be auto flushed.
        Flush is only required when you want to get up to date entities numbers in
        statistics due to some internal mechanism. It will be removed in the future.
      parameters:
      - description: FlushRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.FlushRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.FlushResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: Flush
      tags:
      - Entity
  /persist/segment-info:
    get:
      description: Returns sealed segments's information of a collection
      parameters:
      - description: GetPersistentSegmentInfoRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.GetPersistentSegmentInfoRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.GetPersistentSegmentInfoResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: GetPersistentSegmentInfo
      tags:
      - Entity
  /persist/state:
    get:
      description: Get the flush state of multiple segments
      parameters:
      - description: GetFlushStateRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.GetFlushStateRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.GetFlushStateResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: GetFlushState
      tags:
      - Entity
  /query:
    post:
      description: do a explicit record query by given expression. For example when
        you want to query by primary key.
      parameters:
      - description: QueryRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.QueryRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.QueryResults'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: Query
      tags:
      - Entity
  /query-segment-info:
    get:
      description: Returns growing segments's information of a collection
      parameters:
      - description: GetQuerySegmentInfoRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.GetQuerySegmentInfoRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.GetQuerySegmentInfoResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: GetQuerySegmentInfo
      tags:
      - Entity
  /replicas:
    get:
      description: GetReplicas info of a collection
      parameters:
      - description: GetReplicasRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.GetReplicasRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.GetReplicasResponse'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: GetReplicas
      tags:
      - Ops
  /search:
    post:
      description: Do a k nearest neighbors search with bool expression
      parameters:
      - description: SearchRequest
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.SearchRequest'
      responses:
        "200":
          description: Request accepted
          schema:
            $ref: '#/definitions/server.SearchResults'
        "400":
          description: Bad request format
          schema:
            $ref: '#/definitions/common.Status'
      summary: Search
      tags:
      - Entity
swagger: "2.0"
